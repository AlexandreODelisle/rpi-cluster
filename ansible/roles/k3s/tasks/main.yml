---
- name: Create HostName file
  become: true
  copy:
    mode: 0644
    dest: "/etc/hostname"
    content: |
      {{ inventory_hostname }}
  register: change_hostname

- name: Install k3s depedencies APT Packages
  become: true
  apt:
    pkg: "{{ apt.packages }}"
    state: latest # noqa package-latest
    update_cache: true
  register: change_packages

- name: Enable container features
  become: true
  replace:
    path: /boot/firmware/cmdline.txt
    regexp: '^([\w](?!.*\b{{ item }}\b).*)$'
    replace: '\1 {{ item }}'
  with_items:
    - "cgroup_enable=cpuset"
    - "cgroup_memory=1"
    - "cgroup_enable=memory"
  register: change_boot_cmd

- name: Check if reboot required
  stat:
    path: /var/run/reboot-required
  register: reboot_required_file

- name: Reboot VM
  when: change_hostname.changed or change_packages.changed or change_boot_cmd.changed or reboot_required_file.stat.exists
  become: true
  command: "sh reboot"
  async: 1
  poll: 0
  register: make_reboot

- name: Wait for reboot
  when: make_reboot.changed
  wait_for_connection:
    connect_timeout: 20
    sleep: 5
    delay: 5
    timeout: 300

- name: Fetch k3sup setup
  run_once: true
  get_url:
    url: https://get.k3sup.dev
    dest: /usr/local/bin/getk3sup.sh
    mode: 0755
  become: true
  register: fetchgetk3sup
  when: inventory_hostname in groups['k3s_controlplane']

- name: Install k3sup binary
  when: fetchgetk3sup is succeeded and inventory_hostname in groups['k3s_controlplane']
  command: /usr/local/bin/getk3sup.sh
  become: true
  register: installk3sup

- name: check if already installed
  stat:
    path: /usr/local/bin/k3s-uninstall.sh
  register: stat_result

- name: generate script for server nodes
  become: false
  template:
    src: templates/install_controlplane.j2
    dest: /tmp/install_controlplane_{{ ansible_host }}.sh
    mode: '0770'
  when: inventory_hostname in groups['k3s_controlplane']
  delegate_to: localhost

- name: Run k3sup for server nodes
  become: false
  command: "sh /tmp/install_controlplane_{{ ansible_host }}.sh"
  register: results
  when: inventory_hostname in groups['k3s_controlplane']
  delegate_to: localhost

- name: generate script for agent nodes
  become: false
  template:
    src: templates/install_worker.j2
    dest: "/tmp/install_worker_{{ ansible_host }}.sh"
    mode: '0770'
  when: inventory_hostname in groups['k3s_workers']
  delegate_to: localhost

- name: Run k3sup for workers nodes
  command: "sh /tmp/install_worker_{{ ansible_host }}.sh"
  register: results
  become: false
  when: inventory_hostname in groups['k3s_workers']
  delegate_to: localhost
